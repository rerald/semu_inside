// üîê ÎπÑÎ∞ÄÎ≤àÌò∏ Í≤ÄÏ¶ù ÏãúÏä§ÌÖú
console.log('Password validation system loaded');

class PasswordValidator {
    constructor() {
        this.passwordInput = null;
        this.confirmInput = null;
        this.isValid = false;
        this.rules = {
            length: false,
            uppercase: false,
            lowercase: false,
            number: false,
            special: false,
            match: false
        };
        
        this.init();
    }
    
    init() {
        // DOM Î°úÎìú ÌõÑ Ï¥àÍ∏∞Ìôî
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setupEventListeners());
        } else {
            this.setupEventListeners();
        }
    }
    
    setupEventListeners() {
        this.passwordInput = document.getElementById('password');
        this.confirmInput = document.getElementById('password-confirm');
        
        console.log('üîç Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï Ï§ë...');
        console.log('Password input found:', !!this.passwordInput);
        console.log('Confirm input found:', !!this.confirmInput);
        
        if (this.passwordInput) {
            // Í∏∞Ï°¥ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞ (Ï§ëÎ≥µ Î∞©ÏßÄ)
            this.passwordInput.removeEventListener('input', this._boundValidatePassword);
            this.passwordInput.removeEventListener('focus', this._boundShowPasswordRules);
            this.passwordInput.removeEventListener('blur', this._boundHidePasswordRulesIfEmpty);
            
            // Î∞îÏù∏Îî©Îêú Î©îÏÑúÎìú ÏÉùÏÑ±
            this._boundValidatePassword = (e) => this.validatePassword(e.target.value);
            this._boundShowPasswordRules = () => this.showPasswordRules();
            this._boundHidePasswordRulesIfEmpty = () => this.hidePasswordRulesIfEmpty();
            
            // ÏÉàÎ°úÏö¥ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
            this.passwordInput.addEventListener('input', this._boundValidatePassword);
            this.passwordInput.addEventListener('focus', this._boundShowPasswordRules);
            this.passwordInput.addEventListener('blur', this._boundHidePasswordRulesIfEmpty);
            
            console.log('‚úÖ Password input Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï ÏôÑÎ£å');
        }
        
        if (this.confirmInput) {
            // Í∏∞Ï°¥ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞ (Ï§ëÎ≥µ Î∞©ÏßÄ)
            this.confirmInput.removeEventListener('input', this._boundValidatePasswordMatch);
            this.confirmInput.removeEventListener('focus', this._boundShowPasswordRules);
            this.confirmInput.removeEventListener('blur', this._boundHidePasswordRulesIfEmpty);
            
            // Î∞îÏù∏Îî©Îêú Î©îÏÑúÎìú ÏÉùÏÑ±
            this._boundValidatePasswordMatch = () => this.validatePasswordMatch();
            
            // ÏÉàÎ°úÏö¥ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
            this.confirmInput.addEventListener('input', this._boundValidatePasswordMatch);
            this.confirmInput.addEventListener('focus', this._boundShowPasswordRules);
            this.confirmInput.addEventListener('blur', this._boundHidePasswordRulesIfEmpty);
            
            console.log('‚úÖ Confirm input Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï ÏôÑÎ£å');
        }
        
        console.log('‚úÖ Password validation listeners attached');
    }
    
    validatePassword(password) {
        if (!password) {
            this.resetValidation();
            return;
        }
        
        console.log('üîç ÎπÑÎ∞ÄÎ≤àÌò∏ Í≤ÄÏ¶ù Ï§ë:', password);
        
        // Í∞Å Í∑úÏπô Í≤ÄÏ¶ù
        this.rules.length = password.length >= 8;
        this.rules.uppercase = /[A-Z]/.test(password);
        this.rules.lowercase = /[a-z]/.test(password);
        this.rules.number = /[0-9]/.test(password);
        this.rules.special = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password);
        
        console.log('üìã Í≤ÄÏ¶ù Í∑úÏπô Í≤∞Í≥º:', this.rules);
        
        // UI ÏóÖÎç∞Ïù¥Ìä∏
        this.updateRuleDisplay();
        this.updatePasswordStrength(password);
        
        // Ï†ÑÏ≤¥ Í≤ÄÏ¶ù ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÎπÑÎ∞ÄÎ≤àÌò∏ ÏùºÏπò Í≤ÄÏ¶ù Ï†úÏô∏)
        this.updateValidationState();
        
        console.log('‚úÖ ÎπÑÎ∞ÄÎ≤àÌò∏ Í≤ÄÏ¶ù ÏôÑÎ£å, ÏÉÅÌÉú:', this.isValid);
    }
    
    validatePasswordMatch() {
        // DOMÏóêÏÑú ÏßÅÏ†ë ÏöîÏÜåÎ•º Îã§Ïãú Ï∞æÍ∏∞
        const passwordInput = document.getElementById('password');
        const confirmInput = document.getElementById('password-confirm');
        
        if (!passwordInput || !confirmInput) {
            console.log('‚ùå DOM ÏöîÏÜåÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå');
            return;
        }
        
        // DOMÏóêÏÑú ÏßÅÏ†ë Í∞íÏùÑ Í∞ÄÏ†∏Ïò§Í∏∞
        const password = passwordInput.value || '';
        const confirm = confirmInput.value || '';
        
        console.log('üîç ÎπÑÎ∞ÄÎ≤àÌò∏ ÏùºÏπò Í≤ÄÏ¶ù:', { 
            password: password, 
            confirm: confirm,
            passwordLength: password.length,
            confirmLength: confirm.length
        });
        
        if (!confirm) {
            this.rules.match = false;
            this.updateMatchDisplay('empty', 'ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî');
        } else if (password === confirm && password.length > 0) {
            this.rules.match = true;
            this.updateMatchDisplay('match', '‚úì ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌï©ÎãàÎã§');
        } else {
            this.rules.match = false;
            this.updateMatchDisplay('no-match', '‚úó ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§');
        }
        
        console.log('üìã ÏùºÏπò Í≤ÄÏ¶ù Í≤∞Í≥º:', this.rules.match);
        
        this.updateRuleDisplay();
        this.updateValidationState();
        
        console.log('‚úÖ ÏµúÏ¢Ö Í≤ÄÏ¶ù ÏÉÅÌÉú:', this.isValid);
        console.log('üìã Î™®Îì† Í∑úÏπô ÏÉÅÌÉú:', this.rules);
    }
    
    updateRuleDisplay() {
        const rules = [
            { id: 'rule-length', valid: this.rules.length },
            { id: 'rule-uppercase', valid: this.rules.uppercase },
            { id: 'rule-lowercase', valid: this.rules.lowercase },
            { id: 'rule-number', valid: this.rules.number },
            { id: 'rule-special', valid: this.rules.special },
            { id: 'rule-match', valid: this.rules.match }
        ];
        
        rules.forEach(rule => {
            const element = document.getElementById(rule.id);
            if (element) {
                const icon = element.querySelector('i');
                if (rule.valid) {
                    element.classList.add('valid');
                    if (icon) icon.className = 'fas fa-check-circle';
                } else {
                    element.classList.remove('valid');
                    if (icon) icon.className = 'fas fa-times-circle';
                }
            }
        });
    }
    
    updatePasswordStrength(password) {
        const strengthElement = document.getElementById('password-strength');
        const fillElement = document.getElementById('strength-fill');
        const textElement = document.getElementById('strength-text');
        
        if (!strengthElement || !fillElement || !textElement) return;
        
        // Í∞ïÎèÑ Í≥ÑÏÇ∞ (0-100)
        let strength = 0;
        let strengthText = '';
        let strengthClass = '';
        
        if (password.length === 0) {
            strength = 0;
            strengthText = 'ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî';
            strengthClass = '';
        } else {
            // Í∞Å Ï°∞Í±¥Îãπ 20Ï†ê
            if (this.rules.length) strength += 20;
            if (this.rules.uppercase) strength += 20;
            if (this.rules.lowercase) strength += 20;
            if (this.rules.number) strength += 20;
            if (this.rules.special) strength += 20;
            
            // Í∞ïÎèÑ Î†àÎ≤® Í≤∞Ï†ï
            if (strength < 40) {
                strengthText = 'ÏïΩÌï®';
                strengthClass = 'strength-weak';
            } else if (strength < 60) {
                strengthText = 'Î≥¥ÌÜµ';
                strengthClass = 'strength-fair';
            } else if (strength < 80) {
                strengthText = 'Ï¢ãÏùå';
                strengthClass = 'strength-good';
            } else {
                strengthText = 'Í∞ïÌï®';
                strengthClass = 'strength-strong';
            }
        }
        
        // UI ÏóÖÎç∞Ïù¥Ìä∏
        fillElement.style.width = `${strength}%`;
        textElement.textContent = strengthText;
        
        // ÌÅ¥ÎûòÏä§ Ï†úÍ±∞ ÌõÑ ÏÉàÎ°úÏö¥ ÌÅ¥ÎûòÏä§ Ï∂îÍ∞Ä
        strengthElement.className = 'password-strength';
        if (strengthClass) {
            strengthElement.classList.add(strengthClass);
        }
    }
    
    updateMatchDisplay(type, message) {
        const matchElement = document.getElementById('password-match');
        if (!matchElement) return;
        
        matchElement.textContent = message;
        matchElement.className = `password-match ${type}`;
    }
    
    showPasswordRules() {
        const rulesElement = document.querySelector('.password-rules');
        if (rulesElement) {
            rulesElement.style.display = 'block';
        }
    }
    
    hidePasswordRulesIfEmpty() {
        // ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÎπÑÏñ¥ÏûàÍ≥† ÌôïÏù∏ ÎπÑÎ∞ÄÎ≤àÌò∏ÎèÑ ÎπÑÏñ¥ÏûàÏùÑ ÎïåÎßå Ïà®ÍπÄ
        if (this.passwordInput && this.confirmInput) {
            const passwordEmpty = !this.passwordInput.value;
            const confirmEmpty = !this.confirmInput.value;
            
            if (passwordEmpty && confirmEmpty) {
                const rulesElement = document.querySelector('.password-rules');
                if (rulesElement) {
                    rulesElement.style.display = 'none';
                }
            }
        }
    }
    
    updateValidationState() {
        // ÎπÑÎ∞ÄÎ≤àÌò∏ ÏùºÏπò Í≤ÄÏ¶ùÏùÑ Î®ºÏ†Ä ÏàòÌñâ
        this.validatePasswordMatch();
        
        // Î™®Îì† Í∑úÏπôÏù¥ ÌÜµÍ≥ºÌñàÎäîÏßÄ ÌôïÏù∏
        this.isValid = Object.values(this.rules).every(rule => rule);
        
        console.log('üìã Ï†ÑÏ≤¥ Í≤ÄÏ¶ù ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏:', this.rules);
        console.log('‚úÖ ÏµúÏ¢Ö Ïú†Ìö®ÏÑ±:', this.isValid);
        
        // ÏûÖÎ†• ÌïÑÎìú Ïä§ÌÉÄÏùº ÏóÖÎç∞Ïù¥Ìä∏
        if (this.passwordInput) {
            this.passwordInput.classList.remove('valid', 'invalid');
            if (this.passwordInput.value) {
                const basicRulesValid = this.rules.length && this.rules.uppercase && 
                                      this.rules.lowercase && this.rules.number && this.rules.special;
                this.passwordInput.classList.add(basicRulesValid ? 'valid' : 'invalid');
            }
        }
        
        if (this.confirmInput) {
            this.confirmInput.classList.remove('valid', 'invalid');
            if (this.confirmInput.value) {
                this.confirmInput.classList.add(this.rules.match ? 'valid' : 'invalid');
            }
        }
        
        // Ï†úÏ∂ú Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        this.updateSubmitButton();
    }
    
    updateSubmitButton() {
        const submitButton = document.querySelector('#register-form button[type="submit"]');
        if (submitButton) {
            if (this.isValid) {
                submitButton.disabled = false;
                submitButton.style.opacity = '1';
                submitButton.style.cursor = 'pointer';
            } else {
                // ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûÖÎ†•ÎêòÏóàÏßÄÎßå Ï°∞Í±¥ÏùÑ ÎßåÏ°±ÌïòÏßÄ ÏïäÎäî Í≤ΩÏö∞ÏóêÎßå ÎπÑÌôúÏÑ±Ìôî
                if (this.passwordInput && this.passwordInput.value) {
                    submitButton.disabled = true;
                    submitButton.style.opacity = '0.6';
                    submitButton.style.cursor = 'not-allowed';
                } else {
                    submitButton.disabled = false;
                    submitButton.style.opacity = '1';
                    submitButton.style.cursor = 'pointer';
                }
            }
        }
    }
    
    resetValidation() {
        this.rules = {
            length: false,
            uppercase: false,
            lowercase: false,
            number: false,
            special: false,
            match: false
        };
        
        this.updateRuleDisplay();
        this.updatePasswordStrength('');
        this.updateMatchDisplay('empty', '');
        this.updateValidationState();
    }
    
    // Ïô∏Î∂ÄÏóêÏÑú Ìò∏Ï∂úÌï† Ïàò ÏûàÎäî Í≤ÄÏ¶ù Ìï®Ïàò
    isPasswordValid() {
        return this.isValid;
    }
    
    getValidationErrors() {
        // ÏûÑÏãúÎ°ú Îπà Î∞∞Ïó¥ Î∞òÌôò (Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú Î∞©ÏßÄ)
        return [];
    }
}

// Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
const passwordValidator = new PasswordValidator();

// Ï†ÑÏó≠ Ìï®ÏàòÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞
window.passwordValidator = passwordValidator;

console.log('‚úÖ Password validation system initialized');
